src_url,vcs,name,web_url,description
https://github.com/apache/tez,git,Apache Tez,http://tez.apache.org/,The Apache TEZ® project is aimed at building an application framework which allows for a complex directed-acyclic-graph of tasks for processing data. It is currently built atop Apache Hadoop YARN.
https://github.com/hazelcast/hazelcast-jet,git,Hazelcast Jet,http://jet.hazelcast.org/,"Distributed stream and batch processing engine, built on top of Hazelcast. "
https://github.com/apache/beam,git,Apache Beam,https://beam.apache.org/,"A unified model for defining both batch and streaming data-parallel processing pipelines. Using one of the open source Beam SDKs, you build a program that defines the pipeline. The pipeline is then executed by one of Beam’s supported distributed processing back-ends, which include Apache Flink, Apache Spark, and Google Cloud Dataflow."
https://github.com/akka/akka,git,Akka,https://akka.io/,"A toolkit for building highly concurrent, distributed, and resilient message-driven applications for Java and Scala"
https://github.com/apache/hadoop,git,Apache Hadoop,https://hadoop.apache.org/,"A framework that allows for the distributed processing of large data sets across clusters of computers using simple programming models. It is designed to scale up from single servers to thousands of machines, each offering local computation and storage. Rather than rely on hardware to deliver high-availability, the library itself is designed to detect and handle failures at the application layer, so delivering a highly-available service on top of a cluster of computers, each of which may be prone to failures."
https://github.com/apache/flink,git,Apache Flink,https://flink.apache.org/,"A framework and distributed processing engine for stateful computations over unbounded and bounded data streams. Flink has been designed to run in all common cluster environments, perform computations at in-memory speed and at any scale."
https://github.com/apache/spark,git,Apache Spark,http://spark.apache.org/,"A fast and general-purpose cluster computing system. It provides high-level APIs in Java, Scala, Python and R, and an optimized engine that supports general execution graphs. It also supports a rich set of higher-level tools including Spark SQL for SQL and structured data processing, MLlib for machine learning, GraphX for graph processing, and Spark Streaming."
https://github.com/apache/samza,git,Apache Samza,http://samza.apache.org/,"A distributed stream processing framework. It uses Apache Kafka for messaging, and Apache Hadoop YARN to provide fault tolerance, processor isolation, security, and resource management."
https://github.com/apache/storm,git,Apache Storm,https://storm.apache.org/,"Apache Storm is a distributed real-time computation system, which makes it easy to reliably process unbounded streams of data, doing for real-time processing what Hadoop did for batch processing. Use cases span real-time analytics, online machine learning, continuous computation, distributed RPC, ETL, and more."
